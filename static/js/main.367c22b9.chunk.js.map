{"version":3,"sources":["Components/Common/Loading.module.css","Components/Common/LoadingScreen.jsx","Components/Table/Table.jsx","Components/Table/DetailRow.jsx","Components/ModeSelector/ModeSelector.jsx","Components/TableSearch/TableSearch.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","LoadingScreen","useState","loading","setLoading","useEffect","className","style","color","size","Table","data","onSort","sort","sortField","onRowSelect","onClick","bind","map","item","id","title","body","DetailRow","row","ModeSelector","onSelect","display","justifyContent","margin","width","height","TableSearch","onSearch","value","setState","type","onChange","event","target","placeholder","aria-label","aria-describedby","App","state","isModeSelected","isLoading","search","currentPage","fetchData","url","a","fetch","response","json","_","orderBy","cloneData","concat","handleChange","selected","this","filter","toLowerCase","includes","filteredData","getFilteredData","displayData","chunk","length","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.367c22b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingScreen\":\"Loading_LoadingScreen__1lEXg\"};","import React, {useState,useEffect} from \"react\"\r\nimport CircleLoader from \"react-spinners/ClipLoader\";\r\nimport  style from './Loading.module.css'\r\n\r\n\r\nconst LoadingScreen = () => {\r\n\r\n    let [loading,setLoading]=useState(false)\r\n\r\n\r\n    useEffect(()=>{\r\n        setLoading(true)\r\n    },[])\r\n\r\n    return (\r\n        <div className={style.LoadingScreen}>\r\n            {\r\n                loading ?\r\n                    <CircleLoader loading={loading} color={\"red\"} size={500} />\r\n                    :null\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default LoadingScreen;\r\n","import React from \"react\";\r\n\r\nconst Table=({data,onSort,sort,sortField,onRowSelect})=>{\r\ndebugger\r\n    return(\r\n        <div>\r\n            <table className=\"table\">\r\n                <thead>\r\n\r\n                <tr>\r\n                    <th onClick={onSort.bind(null,'id')}>userId\r\n                        {sortField==='id'?<small>{sort}</small>:null}\r\n                    </th>\r\n                    <th onClick={onSort.bind(null,'title')}>title\r\n                        {sortField==='title'?<small>{sort}</small>:null}\r\n                    </th>\r\n                    <th onClick={onSort.bind(null,'body')}>body\r\n                        {sortField==='body'?<small>{sort}</small>:null}\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {data&&data.map(item=>(\r\n                    <tr key={item.id} onClick={onRowSelect.bind(null,item)}>\r\n                        <td>{item.id}</td>\r\n                        <td>{item.title}</td>\r\n                        <td>{item.body}</td>\r\n                    </tr>\r\n                ))}\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Table;","import React from \"react\";\r\n\r\nconst DetailRow=({row})=>{\r\n\r\n    return(\r\n        <div>\r\n            <br/>\r\n            <b>\r\n            <table className=\"table\">\r\n                    <tr key={row.id}>\r\n                        <td>{row.id}</td>\r\n                        <td>{row.title}</td>\r\n                        <td>{row.body}</td>\r\n                    </tr>\r\n\r\n            </table>\r\n            </b>\r\n        </div>\r\n    )\r\n}\r\nexport default DetailRow;","import React from \"react\";\r\n\r\nconst ModeSelector = ({onSelect,}) => {\r\n    const smallUrl = 'http://jsonplaceholder.typicode.com/posts'\r\n    const bigUrl = 'http://jsonplaceholder.typicode.com/posts'\r\n    return (\r\n        <div>\r\n            <h3 style={{display:'flex',justifyContent:\"center\",margin:'100px'}} >Выберите размер масива данных</h3>\r\n        <div style={{display:'flex',justifyContent:\"center\",margin:'100px 400px',width:'220px',height:'120px'}}>\r\n            <button onClick={() => onSelect(smallUrl)} className=\"btn btn-success\">50 элементов</button>\r\n            <button onClick={() => onSelect(bigUrl)} className=\"btn btn-warning\">100 элементов</button>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModeSelector;","import React, {useState} from \"react\";\r\n\r\nconst TableSearch =({onSearch})=>{\r\n\r\n    const[value,setState]=useState('')\r\n\r\n    const valueChange=(event)=>{\r\n        setState(event.target.value)\r\n    }\r\n    return(\r\n        <div>\r\n            <div className=\"input-group mb-3 mt-3\">\r\n                <button className=\"btn btn-outline-secondary\"\r\n                        onClick={()=>onSearch(value)}\r\n                        type=\"button\" id=\"button-addon1\">Search</button>\r\n                <input type=\"text\" className=\"form-control\"\r\n                       value={value}\r\n                       onChange={valueChange}\r\n                       placeholder=\"\" aria-label=\"Example text with button addon\"\r\n                       aria-describedby=\"button-addon1\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TableSearch;","import './App.css';\nimport React, {Component} from \"react\";\nimport LoadingScreen from \"./Components/Common/LoadingScreen\";\nimport Table from \"./Components/Table/Table\";\nimport _ from 'lodash'\nimport DetailRow from \"./Components/Table/DetailRow\";\nimport ModeSelector from \"./Components/ModeSelector/ModeSelector\";\nimport ReactPaginate from \"react-paginate\";\nimport TableSearch from \"./Components/TableSearch/TableSearch\";\n\n\nclass App extends Component {\n\n\n    state = {\n        isModeSelected: false,\n        isLoading: false,\n        data: [],\n        search: '',\n        sort: 'asc',\n        sortField: 'id',\n        row: null,\n        currentPage: 0,\n    }\n\n    fetchData = async (url) => {\n        const response = await fetch(url)\n        const data = await response.json()\n\n        this.setState({\n            isLoading: false,\n            data: _.orderBy(data, this.state.sortField, this.state.sort)\n        })\n    }\n\n\n    onSort = (sortField) => {\n        let cloneData = this.state.data.concat();\n        let sort = this.state.sort === 'asc' ? 'desc' : 'asc';\n        let data = _.orderBy(cloneData, sortField, sort)\n        this.setState({data, sort, sortField,})\n    }\n\n    onRowSelect = (row) => {\n        this.setState({row})\n    }\n\n    onSelect = (url) => {\n        this.setState({\n            isModeSelected: true,\n            isLoading: true\n        })\n\n        this.fetchData(url)\n    }\n\n    handleChange = ({selected}) => {\n        this.setState({currentPage: selected})\n\n    }\n    onSearch = (search) => {\n        this.setState({search, currentPage: 0})\n\n    }\n\n    getFilteredData  () {\n        const {data, search} = this.state\n\n        if (!search) {\n            return data\n        }\n\n        return data.filter(item => {\n            return item['title'].toLowerCase().includes(search.toLowerCase())\n        })\n    }\n\n    render() {\n\n        const pageSize = 10\n        if (!this.state.isModeSelected) {\n            return (\n                <div className=\"container\">\n                    <ModeSelector onSelect={this.onSelect}/>\n                </div>\n            )\n        }\n\n        const filteredData = this.getFilteredData()\n\n        const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage]\n        debugger\n\n        return (\n            <div className=\"container\">\n                \n                {this.state.isLoading ? <LoadingScreen/> :\n                    <>\n                        <TableSearch onSearch={this.onSearch}/>\n                        <Table\n                            data={displayData}\n                            onSort={this.onSort}\n                            sort={this.state.sort}\n                            sortField={this.state.sortField}\n                            onRowSelect={this.onRowSelect}\n                        />\n                    </>\n                }\n                {\n                    this.state.data.length > pageSize\n                        ? <ReactPaginate\n                            previousLabel={'previous'}\n                            nextLabel={'next'}\n                            breakLabel={'...'}\n                            breakClassName={'break-me'}\n                            pageCount={10}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={this.handleChange}\n                            containerClassName={'pagination'}\n                            activeClassName={'active'}\n                            pageClassName='page-item'\n                            pageLinkClassName='page-link'\n                            previousClassName='page-item'\n                            nextClassName='page-item'\n                            previousLinkClassName='page-link'\n                            nextLinkClassName='page-link'\n                            forcePage={this.state.currentPage}\n                        />\n\n                        : null\n                }\n                {\n\n                    this.state.row ? <DetailRow row={this.state.row}/> : null\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}